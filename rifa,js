 
// Configuraci√≥n Firebase
const firebaseConfig = {
  apiKey: "AIzaSyD-3xKx4M5GxSQ-oJdnqz33hEZqFNBHoxM",
  authDomain: "aloy-726.firebaseapp.com",
  projectId: "aloy-726",
  storageBucket: "aloy-726.appspot.com",
  messagingSenderId: "441895072453",
  appId: "1:441895072453:web:aeaabb2d4f5fbc1a85b6ac",
  measurementId: "G-GX6KWD2LR7"
};

// Inicializaci√≥n con verificaci√≥n
try {
  firebase.initializeApp(firebaseConfig);
  console.log('‚úÖ Firebase inicializado correctamente');
} catch (error) {
  console.error('‚ùå Error al inicializar Firebase:', error);
  Swal.fire({
    icon: 'error',
    title: 'Error de Configuraci√≥n',
    text: 'Error de configuraci√≥n de Firebase: ' + error.message,
    confirmButtonText: 'Recargar P√°gina',
    allowOutsideClick: false
  }).then(() => {
    location.reload();
  });
}

let db;
try {
  db = firebase.firestore();
  console.log('‚úÖ Firestore conectado');
} catch (error) {
  console.error('‚ùå Error al conectar Firestore:', error);
  Swal.fire({
    icon: 'error',
    title: 'Error de Conexi√≥n',
    text: 'Error de conexi√≥n con Firestore: ' + error.message,
    confirmButtonText: 'Reintentar',
    allowOutsideClick: false
  }).then(() => {
    location.reload();
  });
}

const auth = firebase.auth();
const allowedAdmins = ["willyescobar@gmail.com", "meichtryes@gmail.com"];

let currentUser = null;
let rifaData = [];
let currentEditingId = null;
let isAdmin = false;

const estadoLabels = { 1: 'Disponible', 2: 'Reservado', 3: 'Pagado' };
const estadoClasses = { 1: 'disponible', 2: 'reservado', 3: 'pagado' };

// Navegaci√≥n
function showPublicView() {
  document.getElementById('admin-login').style.display = 'none';
  document.getElementById('admin-view').style.display = 'none';
  document.getElementById('public-view').style.display = 'block';
  isAdmin = false;
}

function showAdminLogin() {
  document.getElementById('public-view').style.display = 'none';
  document.getElementById('admin-view').style.display = 'none';
  document.getElementById('admin-login').style.display = 'block';
}

function showAdminView() {
  document.getElementById('public-view').style.display = 'none';
  document.getElementById('admin-login').style.display = 'none';
  document.getElementById('admin-view').style.display = 'block';
  isAdmin = true;
}

// Login
document.getElementById('login-google').onclick = function() {
  const provider = new firebase.auth.GoogleAuthProvider();
  auth.signInWithPopup(provider)
    .then(result => handleAuthResult(result))
    .catch(error => {
      console.error('‚ùå Error en login:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error de Login',
        text: 'Error al iniciar sesi√≥n: ' + error.message,
        confirmButtonText: 'Reintentar'
      });
    });
};

function handleAuthResult(result) {
  const email = result.user.email;
  if (allowedAdmins.includes(email)) {
    currentUser = result.user;
    document.getElementById('user-name').textContent = currentUser.displayName || currentUser.email;
    document.getElementById('user-avatar').src = currentUser.photoURL || 
      'https://ui-avatars.com/api/?name=' + encodeURIComponent(currentUser.displayName || 'Admin');
    showAdminView();
    loadRifaData(true);
  } else {
    Swal.fire({
      icon: 'warning',
      title: 'Acceso Denegado',
      text: 'No tienes permisos de administrador.',
      confirmButtonText: 'Entendido'
    });
    auth.signOut();
  }
}

document.getElementById('logout-btn').onclick = function() {
  auth.signOut().then(() => {
    currentUser = null;
    showPublicView();
  });
};

// Cargar datos
function loadRifaData(adminMode = false) {
  console.log('üì° Intentando cargar datos de Firestore...');
  db.collection('rifa').orderBy('numero').onSnapshot((snapshot) => {
    rifaData = [];
    snapshot.forEach((doc) => {
      rifaData.push({
        id: doc.id,
        ...doc.data()
      });
    });
    
    console.log('‚úÖ Datos cargados:', rifaData.length, 'registros');
    
    if (rifaData.length === 0) {
      console.log('üî® Base vac√≠a, inicializando n√∫meros...');
      initializeRifaNumbers();
    } else {
      renderRifaGrid(adminMode);
      updateStats(adminMode);
    }
  }, (error) => {
    console.error('‚ùå Error al cargar datos:', error);
    document.getElementById(adminMode ? 'admin-loading' : 'public-loading').innerHTML = 
      '<p style="color: red;">‚ùå Error de conexi√≥n con Firebase<br><small>Verifica la consola del navegador (F12)</small></p>';
    Swal.fire({
      icon: 'error',
      title: 'Error al Cargar Datos',
      text: 'No se pudieron cargar los n√∫meros. Verifica tu conexi√≥n.',
      confirmButtonText: 'Reintentar'
    });
  });
}

async function initializeRifaNumbers() {
  try {
    console.log('üîß Creando 100 n√∫meros en Firebase...');
    const batch = db.batch();
    
    for (let i = 1; i <= 100; i++) {
      const docRef = db.collection('rifa').doc(i.toString().padStart(3, '0'));
      batch.set(docRef, {
        numero: i,
        nombre: '',
        buyer: '',
        email: '',
        state: 1,
        time: null
      });
    }
    
    await batch.commit();
    console.log('‚úÖ 100 n√∫meros creados exitosamente');
  } catch (error) {
    console.error('‚ùå Error al inicializar n√∫meros:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error al Crear N√∫meros',
      text: 'Error al crear n√∫meros: ' + error.message,
      confirmButtonText: 'Intentar de Nuevo'
    });
  }
}

function renderRifaGrid(adminMode) {
  const gridEl = adminMode ? 'admin-rifa-grid' : 'public-rifa-grid';
  const loadingEl = adminMode ? 'admin-loading' : 'public-loading';
  const grid = document.getElementById(gridEl);
  
  // Limpiar completamente el grid antes de renderizar
  grid.innerHTML = '';
  grid.style.display = 'none';
  
  rifaData.forEach(item => {
    const card = document.createElement('div');
    let isDisabled = false;
    let actionText = '';
    
    if (adminMode) {
      actionText = 'Editar';
    } else {
      if (item.state === 1) {
        actionText = 'Reservar';
      } else if (item.state === 2) {
        actionText = 'Desreservar';
      } else if (item.state === 3) {
        isDisabled = true;
        actionText = 'Pagado';
      }
    }
    
    card.className = `numero-card ${estadoClasses[item.state]} ${isDisabled ? 'disabled' : ''}`;
    
    let nombreDisplay = '';
    if (item.nombre) {
      const nombreCorto = item.nombre.split(' ')[0];
      nombreDisplay = `<div class="nombre-mini">${nombreCorto}</div>`;
    }
    
    card.innerHTML = `
      <div class="numero">${item.numero}</div>
      <div class="estado">${estadoLabels[item.state]}</div>
      ${nombreDisplay}
    `;
    
    if (!isDisabled) {
      // Usar addEventListener en lugar de onclick para mejor control
      card.addEventListener('click', function() {
        if (adminMode) {
          openAdminModal(item);
        } else {
          openPublicModal(item);
        }
      });
    }
    
    grid.appendChild(card);
  });
  
  document.getElementById(loadingEl).style.display = 'none';
  document.getElementById(gridEl).style.display = 'grid';
}

function updateStats(adminMode) {
  const prefix = adminMode ? 'admin' : 'public';
  const disponibles = rifaData.filter(item => item.state === 1).length;
  const reservados = rifaData.filter(item => item.state === 2).length;
  const pagados = rifaData.filter(item => item.state === 3).length;
  
  document.getElementById(`${prefix}-stat-disponibles`).textContent = disponibles;
  document.getElementById(`${prefix}-stat-reservados`).textContent = reservados;
  document.getElementById(`${prefix}-stat-pagados`).textContent = pagados;
}

// Modal P√∫blico
function openPublicModal(item) {
  currentEditingId = item.id;
  
  const isReserva = item.state === 1;
  
  if (isReserva) {
    // Para reserva: abrir el modal normal
    document.getElementById('public-modal-numero').textContent = item.numero;
    
    const modalTitle = 'Reservar N√∫mero';
    document.querySelector('#public-modal .modal-header h3').innerHTML = modalTitle + ' <span id="public-modal-numero">' + item.numero + '</span>';
    
    const formFields = document.querySelectorAll('#public-form .form-group');
    formFields.forEach(field => field.style.display = 'block');
    
    const submitBtn = document.querySelector('#public-form .md-button[type="submit"]');
    submitBtn.innerHTML = `<span class="material-icons">check_circle</span> Confirmar Reserva`;
    
    const infoBox = document.querySelector('#public-modal .info-box p');
    infoBox.textContent = '‚è∞ Los administradores confirmar√°n tu pago en breve';
    
    document.getElementById('public-modal').classList.add('active');
  } else {
    // Para desreserva: mostrar confirmaci√≥n con SweetAlert2
    Swal.fire({
      title: '¬øDesreservar N√∫mero?',
      text: '¬øSeguro que quieres desreservar el n√∫mero ' + item.numero + '?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'S√≠, Desreservar',
      cancelButtonText: 'Cancelar'
    }).then((result) => {
      if (result.isConfirmed) {
        // Llamar a la funci√≥n de desreserva
        desreservarNumero(item);
      }
    });
  }
}

document.getElementById('public-form').onsubmit = async function(e) {
  e.preventDefault();
  
  const item = rifaData.find(item => item.id === currentEditingId);
  const nombre = document.getElementById('public-nombre-input').value.trim();
  const email = document.getElementById('public-email-input').value.trim();
  
  if (!nombre) {
    Swal.fire({
      icon: 'warning',
      title: 'Nombre requerido',
      text: 'Por favor ingresa tu nombre.',
      confirmButtonText: 'OK'
    });
    return;
  }
  
  try {
    await db.collection('rifa').doc(currentEditingId).update({
      nombre: nombre,
      buyer: email || '',
      email: email || '',
      state: 2,
      time: firebase.firestore.FieldValue.serverTimestamp()
    });
    
    console.log('‚úÖ Reserva guardada');
    closePublicModal();
    Swal.fire({
      icon: 'success',
      title: '¬°Reserva Exitosa!',
      html: `
        <img src="./rifa/rifi-gui√±o.png" alt="Rifi gui√±o" style="max-width:100px;display:block;margin:0 auto 12px;">
        N√∫mero ${item.numero} reservado exitosamente. Ya puedes realizar el pago.
      `,
      confirmButtonText: '¬°Genial!'
    });
  } catch (error) {
    console.error('‚ùå Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error al Reservar',
      text: 'Error al reservar: ' + error.message,
      confirmButtonText: 'Intentar de Nuevo'
    });
  }
};

function closePublicModal() {
  document.getElementById('public-modal').classList.remove('active');
  document.getElementById('public-form').reset();
  document.getElementById('public-nombre-input').value = '';
  document.getElementById('public-email-input').value = '';
  currentEditingId = null;
}

// Funci√≥n para desreservar (llamada desde openPublicModal)
async function desreservarNumero(item) {
  try {
    await db.collection('rifa').doc(item.id).update({
      nombre: '',
      buyer: '',
      email: '',
      state: 1,
      time: null
    });
    
    console.log('‚úÖ Desreserva guardada');
    Swal.fire({
      icon: 'info',
      title: 'N√∫mero Desreservado',
      text: 'N√∫mero ' + item.numero + ' desreservado.',
      confirmButtonText: 'OK'
    });
  } catch (error) {
    console.error('‚ùå Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error al Desreservar',
      text: 'Error al desreservar: ' + error.message,
      confirmButtonText: 'Intentar de Nuevo'
    });
  }
}

// Modal Admin
function openAdminModal(item) {
  currentEditingId = item.id;
  document.getElementById('admin-modal-numero').textContent = item.numero;
  document.getElementById('admin-nombre-input').value = item.nombre || '';
  document.getElementById('admin-email-input').value = item.email || '';
  
  const estadoSelect = document.getElementById('admin-estado-select');
  estadoSelect.value = item.state;
  
  document.getElementById('admin-modal').classList.add('active');
}

function closeAdminModal() {
  document.getElementById('admin-modal').classList.remove('active');
  document.getElementById('admin-form').reset();
  document.getElementById('admin-nombre-input').value = '';
  document.getElementById('admin-email-input').value = '';
  currentEditingId = null;
}

document.getElementById('admin-form').onsubmit = async function(e) {
  e.preventDefault();
  
  const nombre = document.getElementById('admin-nombre-input').value.trim();
  const email = document.getElementById('admin-email-input').value.trim();
  const state = parseInt(document.getElementById('admin-estado-select').value);
  
  try {
    const updateData = {
      nombre: nombre,
      email: email,
      state: state,
      time: firebase.firestore.FieldValue.serverTimestamp()
    };
    
    if (state === 1) {
      updateData.nombre = '';
      updateData.email = '';
      updateData.time = null;
    }
    
    await db.collection('rifa').doc(currentEditingId).update(updateData);
    
    console.log('‚úÖ Cambios guardados:', updateData);
    closeAdminModal();
    Swal.fire({
      icon: 'success',
      title: 'Cambios Guardados',
      text: 'Los cambios se han guardado correctamente.',
      confirmButtonText: 'Perfecto'
    });
  } catch (error) {
    console.error('‚ùå Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error al Guardar',
      text: 'Error al guardar: ' + error.message,
      confirmButtonText: 'Reintentar'
    });
  }
};

// Cerrar modales al hacer clic fuera (usar addEventListener una sola vez)
document.getElementById('public-modal').addEventListener('click', function(e) {
  if (e.target === this) {
    closePublicModal();
  }
});

document.getElementById('admin-modal').addEventListener('click', function(e) {
  if (e.target === this) {
    closeAdminModal();
  }
});

// Inicializar
auth.onAuthStateChanged(user => {
  if (user && allowedAdmins.includes(user.email)) {
    currentUser = user;
    document.getElementById('user-name').textContent = currentUser.displayName || currentUser.email;
    document.getElementById('user-avatar').src = currentUser.photoURL || 
      'https://ui-avatars.com/api/?name=' + encodeURIComponent(currentUser.displayName || 'Admin');
    showAdminView();
    loadRifaData(true);
  } else {
    showPublicView();
    loadRifaData(false);
  }
});

console.log('üöÄ Sistema de Rifa iniciado');
 